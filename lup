#!/usr/bin/perl
use strict;
use warnings;
use utf8;
use Encode qw(encode_utf8 decode_utf8);
use File::Basename qw(basename);
use Getopt::Long qw(:config posix_default no_ignore_case gnu_compat bundling);
use Unicode::UCD qw(charprop);

use open IO => ":encoding(UTF-8)";
binmode STDIN, ":encoding(UTF-8)";
binmode STDOUT, ":encoding(UTF-8)";
binmode STDERR, ":encoding(UTF-8)";

my $cmd_name = basename($0);
my $usage = <<EOL;
usage: $cmd_name [<option(s)>] [<file(s)>]
line up text

options:
  -i, --keep-indent      keep the first indent as indents
  -I, --no-keep-indent   ignore indents
      --help             print usage
EOL

sub print_error_and_abort {
    my ($error) = @_;
    chomp $error;
    print STDERR "$cmd_name: $error\n";
    exit 1;
}

sub read_lines_from_argf {
    my $lines = [];
    while (my $line = <>) {
        chomp $line;
        push @$lines, $line;
    }
    return $lines;
}

my $eawidth_ch_memo = {};
sub eawidth_ch {
    my ($ch) = @_;
    if (exists($eawidth_ch_memo->{$ch})) {
        return $eawidth_ch_memo->{$ch};
    }
    my $width;
    my $type = charprop(ord($ch), "East_Asian_Width");
    if ($type eq "Fullwidth" || $type eq "Wide" || $type eq "Ambiguous") {
        $width = 2;
    } else {
        $width = 1;
    }
    $eawidth_ch_memo->{$ch} = $width;
    return $width;
}

sub eawidth {
    my ($text) = @_;
    my $width = 0;
    for my $ch (split //, $text) {
        $width += eawidth_ch($ch);
    }
    return $width;
}

sub line_up_lines {
    my ($lines, $keep_indent) = @_;

    my $cells        = [];
    my $first_indent = undef;
    for my $line (@$lines) {
        my $line_trimed = $line =~ s/^\s+|\s+$//gr;
        my $row         = [split /\s+/, $line_trimed];
        push @$cells, $row;
        if ($keep_indent && !defined($first_indent)) {
            $first_indent = $line =~ s/^(\s+).*/$1/r;
        }
    }

    my $widthes     = {};
    my $max_widthes = {};
    for (my $y = 0; $y < @$cells; $y++) {
        $widthes->{$y} = {};
        for (my $x = 0; $x < @{$cells->[$y]}; $x++) {
            my $cell  = $cells->[$y][$x];
            my $width = eawidth($cell);
            $widthes->{$y}{$x} = $width;
            if (!exists($max_widthes->{$x}) || $width > $max_widthes->{$x}) {
                $max_widthes->{$x} = $width;
            }
        }
    }

    my $cells2 = [];
    for (my $y = 0; $y < @$cells; $y++) {
        push @$cells2, [];
        for (my $x = 0; $x < @{$cells->[$y]}; $x++) {
            my $cell      = $cells->[$y][$x];
            my $width     = $widthes->{$y}{$x};
            my $max_width = $max_widthes->{$x};
            my $cell2     = $cell . " " x ($max_width - $width);
            push @{$cells2->[$y]}, $cell2;
        }
    }

    my $lines2 = [];
    for my $row (@$cells2) {
        my $line2 = join(" ", @$row);
        $line2 =~ s/\s$//;
        if ($keep_indent && defined($first_indent)) {
            $line2 = $first_indent . $line2;
        }
        push @$lines2, $line2;
    }

    return $lines2;
}

sub dump_lines {
    my ($lines) = @_;
    for my $line (@$lines) {
        print "$line\n";
    }
}

sub main {
    local $SIG{__WARN__} = \&print_error_and_abort;

    my $keep_indent = 0;
    my $is_help     = 0;
    GetOptions(
        "keep-indent|i"    => sub { $keep_indent = 1 },
        "no-keep-indent|I" => sub { $keep_indent = 0 },
        "help"             => \$is_help,
    );
    if ($is_help) {
        print $usage;
        exit 0;
    }

    eval {
        my $lines  = read_lines_from_argf;
        my $lines2 = line_up_lines($lines, $keep_indent);
        dump_lines($lines2);
    };
    if ($@) {
        print_error_and_abort($@);
    }
}
main;
